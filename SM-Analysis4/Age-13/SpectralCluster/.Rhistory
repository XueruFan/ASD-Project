rm(list=ls())
packages <- c("kernlab", "cluster", "ggplot2", "Rtsne", "openxlsx")
# sapply(packages,install.packages,character.only=TRUE)
sapply(packages, require, character.only = TRUE)
# abideDir <- '/Volumes/Xueru/PhDproject/ABIDE' # MAC
abideDir <- 'E:/PhDproject/ABIDE' # Windows
dataDir <- file.path(abideDir, "Preprocessed")
resDir <- file.path(abideDir, "Analysis/Cluster/Spect913")
plotDir <- file.path(abideDir, "Plot/Cluster/Spect913")
resDate <- "240315"
newDate <- "240610"
abide_centile <- read.csv(file.path(dataDir, paste0("abide_All_centile_513_", resDate, ".csv")))
data_raw <- subset(abide_centile, dx == "ASD" & sex == "Male")
View(data_raw)
View(data_raw)
View(data_raw)
data_raw <- subset(data_raw, grepl("NYU", site, ignore.case = TRUE))
data_raw <- subset(data_raw, grepl("NYU", Site, ignore.case = TRUE))
data_centile <- na.omit(data_raw[, -2:-6])
View(data_centile)
data <- data_centile[, -1:-8] # 全局脑指标不作为分类变量
################## Part 1: Choose the optimal number of clusters ###################################
# 定义一个函数，用于计算不同聚类数目下的轮廓系数
calculate_silhouette <- function(data, max_clusters = 10) {
silhouette_scores <- numeric(max_clusters - 1)
for (k in 2:max_clusters) {
# 执行谱聚类
set.seed(941205)
cluster_result <- specc(as.matrix(data), centers = k)
cluster_membership <- cluster_result@.Data
# 计算轮廓系数
silhouette_scores[k-1] <- mean(silhouette(cluster_membership, dist(data))[, 3])
}
return(silhouette_scores)
}
# 计算轮廓系数
max_clusters <- 10 # 可以根据需要调整最大聚类数目
silhouette_scores <- calculate_silhouette(data, max_clusters)
# 找出轮廓系数最大时的聚类数
optimal_clusters <- which.max(silhouette_scores) + 1
optimal_clusters
rm(list=ls())
packages <- c("kernlab", "cluster", "ggplot2", "Rtsne", "openxlsx")
# sapply(packages,install.packages,character.only=TRUE)
sapply(packages, require, character.only = TRUE)
# abideDir <- '/Volumes/Xueru/PhDproject/ABIDE' # MAC
abideDir <- 'E:/PhDproject/ABIDE' # Windows
dataDir <- file.path(abideDir, "Preprocessed")
resDir <- file.path(abideDir, "Analysis/Cluster/Spect513")
plotDir <- file.path(abideDir, "Plot/Cluster/Spect513")
resDate <- "240315"
newDate <- "240610"
abide_centile <- read.csv(file.path(dataDir, paste0("abide_All_centile_513_", resDate, ".csv")))
data_raw <- subset(abide_centile, dx == "ASD" & sex == "Male")
data_raw <- subset(data_raw, grepl("NYU", Site, ignore.case = TRUE))
data_centile <- na.omit(data_raw[, -2:-6])
data <- data_centile[, -1:-8] # 全局脑指标不作为分类变量
################## Part 1: Choose the optimal number of clusters ###################################
# 定义一个函数，用于计算不同聚类数目下的轮廓系数
calculate_silhouette <- function(data, max_clusters = 10) {
silhouette_scores <- numeric(max_clusters - 1)
for (k in 2:max_clusters) {
# 执行谱聚类
set.seed(941205)
cluster_result <- specc(as.matrix(data), centers = k)
cluster_membership <- cluster_result@.Data
# 计算轮廓系数
silhouette_scores[k-1] <- mean(silhouette(cluster_membership, dist(data))[, 3])
}
return(silhouette_scores)
}
# 计算轮廓系数
max_clusters <- 10 # 可以根据需要调整最大聚类数目
silhouette_scores <- calculate_silhouette(data, max_clusters)
# 找出轮廓系数最大时的聚类数
optimal_clusters <- which.max(silhouette_scores) + 1
optimal_clusters
# 执行谱聚类
set.seed(941205)
cluster_result <- specc(as.matrix(data), centers = optimal_clusters)
# 获取聚类结果
cluster_membership <- cluster_result@.Data
################################# save result
data_cluster <- cbind(cluster_membership, data_centile)
# 结果发现标准化和不标准化特征值对聚类结果没有影响
colnames(data_cluster)[1] <- "clusterID"
name <- paste0("Cluster_NYUonly_", newDate, ".csv")
write.csv(data_cluster, file.path(resDir, name), row.names = F)
rm(list=ls())
packages <- c("ggplot2", "ggseg", "ggridges", "tidyr", "do", "dplyr", "Cairo", "openxlsx")
# sapply(packages, install.packages, character.only = TRUE)
sapply(packages, require, character.only = TRUE)
# abideDir <- '/Volumes/Xueru/PhDproject/ABIDE' # MAC
abideDir <- 'E:/PhDproject/ABIDE' # Windows
dataDir <- file.path(abideDir, "Preprocessed")
resDir <- file.path(abideDir, "Analysis/Cluster/Spect513")
newDate <- "250117"
oldDate <- "240928"
pred <- read.csv(file.path(resDir, paste0("Cluster_NYU_only_", oldDate, ".csv")))
rm(list=ls())
packages <- c("ggplot2", "ggseg", "ggridges", "tidyr", "do", "dplyr", "Cairo", "openxlsx")
# sapply(packages, install.packages, character.only = TRUE)
sapply(packages, require, character.only = TRUE)
# abideDir <- '/Volumes/Xueru/PhDproject/ABIDE' # MAC
abideDir <- 'E:/PhDproject/ABIDE' # Windows
resDir <- file.path(abideDir, "Analysis/Cluster/Spect513")
newDate <- "250117"
oldDate <- "240610"
nyu <- read.csv(file.path(resDir, paste0("Cluster_NYU_only_", oldDate, ".csv")))
all <- read.csv(file.path(resDir, paste0("Cluster_", oldDate, ".csv")))
View(nyu)
View(all)
View(nyu)
nyu <- nyu[, c(2,1)]
all <- all[, c(2,1)]
View(nyu)
View(all)
merged_data <- merge(nuy, all, by = "participant")
merged_data <- merge(nyu, all, by = "participant")
View(merged_data)
compare <- merged_data %>%
summarise(
Match = sum(clusterID == predicted_cluster),
Mismatch = sum(clusterID != predicted_cluster),
Match_Percent = mean(clusterID == predicted_cluster) * 100,
Mismatch_Percent = mean(clusterID != predicted_cluster) * 100
)
colnames(merged_data)[2:3] <- c("nyu", "all")
compare <- merged_data %>%
summarise(
Match = sum(nuy == all),
Mismatch = sum(nuy != all),
Match_Percent = mean(nuy == all) * 100,
Mismatch_Percent = mean(nuy != all) * 100
)
compare <- merged_data %>%
summarise(
Match = sum(nyu == all),
Mismatch = sum(nyu != all),
Match_Percent = mean(nyu == all) * 100,
Mismatch_Percent = mean(nyu != all) * 100
)
compare
write.csv(compare, file.path(resDir, "compare_ClusterID_NYU_ALL.csv"), row.names = FALSE)
write.csv(merged_data, file.path(resDir, "ClusterID_NYU_ALL.csv"), row.names = FALSE)
